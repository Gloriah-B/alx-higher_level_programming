def matrix_divided(matrix, div):
    """
    Divide all elements of a matrix.

    Args:
        matrix (list): A list of lists of ints or floats.
        div (int/float): The divisor.

    Raises:
        TypeError: If the matrix contains non-numbers.
        TypeError: If the matrix contains rows of different sizes.
        TypeError: If div is not an int or float.
        ZeroDivisionError: If div is 0.

    Returns:
        A new matrix representing the result of the division.

    Examples:
    >>> matrix1 = [
    ...     [1, 2, 3],
    ...     [4, 5, 6]
    ... ]
    >>> div = 2
    >>> matrix_divided(matrix1, div)
    [[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]]

    >>> matrix2 = [
    ...     [10, 20],
    ...     [30, 40],
    ...     [50, 60]
    ... ]
    >>> div = 5
    >>> matrix_divided(matrix2, div)
    [[2.0, 4.0], [6.0, 8.0], [10.0, 12.0]]

    >>> matrix3 = [
    ...     [1.5, 3.0],
    ...     [4.5, 6.0]
    ... ]
    >>> div = 1.5
    >>> matrix_divided(matrix3, div)
    [[1.0, 2.0], [3.0, 4.0]]

    >>> matrix4 = [
    ...     [1, 'a', 3],
    ...     [4, 5, 6]
    ... ]
    >>> div = 2
    >>> matrix_divided(matrix4, div)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix5 = [
    ...     [1, 2, 3],
    ...     [4, 5]
    ... ]
    >>> div = 2
    >>> matrix_divided(matrix5, div)
    Traceback (most recent call last):
    TypeError: Each row of the matrix must have the same size

    >>> matrix6 = [
    ...     [1, 2, 3],
    ...     [4, 5, 6]
    ... ]
    >>> div = 'divisor'
    >>> matrix_divided(matrix6, div)
    Traceback (most recent call last):
    TypeError: div must be a number

    >>> matrix7 = [
    ...     [1, 2, 3],
    ...     [4, 5, 6]
    ... ]
    >>> div = 0
    >>> matrix_divided(matrix7, div)
    Traceback (most recent call last):
    ZeroDivisionError: division by zero
    """
    # Function implementation remains the same as provided
    # ...
