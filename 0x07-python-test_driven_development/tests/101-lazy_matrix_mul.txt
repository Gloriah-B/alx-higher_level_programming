def lazy_matrix_mul(m_a, m_b):
    """
    Matrix multiplication function.

    Args:
        m_a (list): First matrix represented as a list of lists.
        m_b (list): Second matrix represented as a list of lists.

    Raises:
        ValueError: If matrices cannot be multiplied due to incompatible shapes or invalid data types.
        TypeError: If matrix parameters are not properly formatted or contain unsupported data types.

    Returns:
        list: Resultant matrix after multiplication.

    Examples:
        Valid matrix multiplication with integers:
        >>> lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
        [[ 7, 10],
         [15, 22]]

        Valid matrix multiplication with floats:
        >>> lazy_matrix_mul([[1.2, 5.5, 6.2], [4.66, 12.3, -9.2]],
        ...                 [[5.0, 3.3], [-2.9, 4.4], [7.2, 4.4]])
        [[ 34.69,  55.44],
         [-78.61,  29.02]]

        Invalid multiplication due to incompatible shapes:
        >>> lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [2, 3], [4, 5]])
        Traceback (most recent call last):
            ...
        ValueError: shapes (2,2) and (3,2) not aligned: 2 (dim 1) != 3 (dim 0)

        Invalid multiplication due to empty matrices:
        >>> lazy_matrix_mul([[]], [[5, 6], [7, 8]])
        Traceback (most recent call last):
            ...
        ValueError: shapes (1,0) and (2,2) not aligned: 0 (dim 1) != 2 (dim 0)

        Invalid matrix parameters with unsupported data types:
        >>> lazy_matrix_mul("not a list", [[1, 2]])
        Traceback (most recent call last):
            ...
        ValueError: Scalar operands are not allowed, use '*' instead

        >>> lazy_matrix_mul([[1, "non-number"]], [[3, 4]])
        Traceback (most recent call last):
            ...
        ValueError: shapes (1,2) and (1,2) not aligned: 2 (dim 1) != 1 (dim 0)

        Invalid matrix with unequal row lengths:
        >>> lazy_matrix_mul([[1, 2], [3, 4, 5]], [[1, 2], [3, 4]])
        Traceback (most recent call last):
            ...
        ValueError: setting an array element with a sequence.
    """
    # Function implementation remains the same as provided
    # ...
